stages:
  - prepare
  - generate
  - clean

variables:
  IMAGE_PATH: anhtuan9702/buf-tools
  IMAGE_TAG: 1.0.0
  GO_GRPC_REPOSITORY: gitlab.com/jodworkspace/protobuf/grpc-go

prepare:bufbuild:
  stage: prepare
  image:
    name: docker:stable
  services:
    - docker:28.3.2-dind
  script:
    -  echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME --password-stdin 
    -  docker build -t ${IMAGE_PATH}:${IMAGE_TAG} -f Dockerfile .
    -  docker push ${IMAGE_PATH}:${IMAGE_TAG}
    -  echo Pushed image ${IMAGE_PATH}:${IMAGE_TAG}
  when: manual
  allow_failure: true

generate:go:
  stage: generate
  # image:
  #   name: docker:stable
  # services:
  #   - docker:28.3.2-dind
  image: ${IMAGE_PATH}:${IMAGE_TAG}
  script:
    # DinD does not contain Git
    # - docker run --volume "$(pwd):/workspace" --workdir /workspace bufbuild/buf dep update
    # - docker run --volume "$(pwd):/workspace" --workdir /workspace bufbuild/buf generate
    - buf dep update
    - buf generate
    - git clone https://${CI_DEPLOY_USER}:${DEPLOY_TOKEN}@${GO_GRPC_REPOSITORY}.git grpc-go
    - cd grpc-go
    - git switch $CI_COMMIT_BRANCH || git switch -c $CI_COMMIT_BRANCH
    - find . -mindepth 1 ! -regex '^./\.git\(/.*\)?'  -exec rm -rf {} +
    - go mod init gitlab.com/jodworkspace/protobuf/grpc-go
    - cp -rf ../go-pb/* .
    - go mod tidy
    - git config --local user.name "GitLab-CI"
    - git config --local user.email "gitlab-ci@jodworkspace.auto"
    - git config --list --show-origin
    - git add .
    - git commit --allow-empty -m "Update generated codes - ${CI_COMMIT_SHORT_SHA}"
    - git fetch --all
    - git push -f origin $CI_COMMIT_BRANCH
  when: manual
  allow_failure: false

generate:python:
  stage: generate
  image: ${IMAGE_PATH}:${IMAGE_TAG}
  script:
    - echo "TODO"
  when: manual

clean:remove-dev-branch:
  stage: clean
  script:
    - git clone https://${CI_DEPLOY_USER}:${DEPLOY_TOKEN}@${GO_GRPC_REPOSITORY}.git grpc-go
    - cd grpc-go
    - export DEV_BRANCH=$(echo "${CI_COMMIT_MESSAGE}" | grep -oP "Merge branch '\K[^']+")
    - echo "Branch to delete ${DEV_BRANCH}"
    - |
      if [ -z "${DEV_BRANCH}" ]; then
        echo "Source branch not found in the commit message."
      else
        git config --local user.name "GitLab-CI"
        git config --local user.email "gitlab-ci@jodworkspace.auto"
        git push origin --delete ${DEV_BRANCH}
      fi
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: "manual"
  allow_failure: false

